.. ramtools documentation master file, created by
   sphinx-quickstart on Sat Nov 13 12:39:34 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to ramtools's Documentation!
====================================

This is a Python module based on YT to post-process simulation data from RAMSES-RT. The code is accessible from this github repository: https://github.com/chongchonghe/ramtools

Author: Chong-Chong He (che1234 @ umd.edu)

Overview on How to Use this Module
==================================
1. Install required packages (yt)
2. Either clone this repository and install it via :code:`pip install -e .`
   or install it from PyPi via :code:`pip install ramtools` (to be published on PyPi, check back later)

Setup procedure
==================================

Features of ramtools
==================================
1. Simplify the process of analysing RAMSES data with plenty of highly functional tools
2. Make sliceplot/projectplot extremely fast by storing intermediate data at first run and reuse it in subsequent runs

Documentation for the Code
==================================
.. toctree::
   :maxdepth: 2
   :caption: Contents:

ramtools ytfast
==================================
.. automodule:: ramtools.ytfast
   :members:

ramtools ramses
==================================
.. automodule:: ramtools.ramses
   :members:

ramtools ramplot
==================================
.. automodule:: ramtools.ramplot
   :members:

ramtools utilities
==================================
.. automodule:: ramtools.utilities
   :members:

ramtools units
==================================
.. automodule:: ramtools.units
   :members:

ramtools imf
==================================
.. automodule:: ramtools.imf
   :members:

bin plot_projection
==================================
An executable to quickly and efficiently plot slices/projections of a given RAMSES simulation. This function is extremely useful for a first analysis of a new simulation. For example, you can do `plot_projection ./Job10 all x,y,z -t ./Job10/figures` to make density slice plots along the x, y, and z axis for all outputs of Job10 and store all the figures in Job10/figures. The figures willl be properly named. More examples:

:code:`plot_projection Job1 all z -t Job1/figures`

:code:`plot_projection Job2 10-20 x,y,z -t Job2/figures -c 0.6,0.6,0,6 -w 10,pc -f den,temp -k slc,prj`

Indices and tables
==================================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
